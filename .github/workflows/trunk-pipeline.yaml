name: CI & CD Trunk - Trunk CD Pipeline to DEV environment
on:
  push:
    branches:
      - release*
    paths:
      - '**'
      - '!CHANGELOG.md'


# ------------------
# Application Values
# ------------------
env:
  SERVICE_NAME: bfi-task-allocation
  SONAR_ORG: bfi-finance
  SONAR_PROJECT_KEY: bfi-finance_bfi-task-allocation
  IMAGE_PREFIX: DEV


jobs:
# -----------------------------------
# Application Security Scan with SNYK
# -----------------------------------
  security-analysis:
    name: Security Scan - SNYK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Check vulnerabilities with Snyk
        uses: snyk/actions/maven@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args:
            --all-projects
            --severity-threshold=high


# -----------------------------------------------
# Application Static code analysis with SonarQube
# -----------------------------------------------
  static-analysis:
    name: Static Analysis - SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # THIS IS NEEDED HERE (Sonar needs full history for BLAME)

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          architecture: x64
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Verify with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn verify sonar:sonar
          -Dsonar.organization=${{ env.SONAR_ORG }}
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}


# ---------------------------------------
# Build and tag image with Docker and GCP
# ---------------------------------------
  tag_and_push_image:
    needs: [security-analysis, static-analysis]
    name: Build, Tag and Push Image - Docker
    runs-on: ubuntu-latest
    steps:
      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.BFI_GCP_PROJECT }}
          service_account_key: ${{ secrets.BFI_GCP_SA_KEY }}
          export_default_credentials: true

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Use Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          architecture: x64
          distribution: 'corretto'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven
          restore-keys: |
            ${{ runner.os }}-maven

      - uses: nelonoel/branch-name@v1.0.1
      - name: Binding Environment (Trunk Variables)
        run: |
          echo "TRUNK_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "TRUNK_VERSION=$(echo $BRANCH_NAME | cut -c 9-)" >> $GITHUB_ENV

      - name: Binding Environment (Image Variables)
        run: |
          echo "IMAGE_TAG=${{ secrets.IMAGE_NAME }}:${{ env.TRUNK_SHA }}" >> $GITHUB_ENV
          echo "GAR_IMAGE_TAG=${{ secrets.BFI_GCP_DOCKER_REGION }}/${{ secrets.BFI_GCP_PROJECT }}/${{ secrets.GCP_DOCKER_REPO }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_PREFIX }}-${{ env.TRUNK_VERSION }}-${{ env.TRUNK_SHA }}" >> $GITHUB_ENV

      - name: Build Jar
        run: make build

      - name: Build Docker image
        run: docker build --file Dockerfile -t ${{ env.IMAGE_TAG }} .

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.BFI_GCP_PROJECT }}
          service_account_key: ${{ secrets.BFI_GCP_SA_KEY }}
          export_default_credentials: true

      - name: Auth google to docker
        run: gcloud auth configure-docker ${{ secrets.BFI_GCP_DOCKER_REGION }} -q

      - name: Tag image (SHA)
        run: docker image tag ${{ env.IMAGE_TAG }} ${{ env.GAR_IMAGE_TAG }}

      - name: Push image to GAR (SHA)
        run: docker push ${{ env.GAR_IMAGE_TAG }}


# --------------------------------------
# Update deployment spec to use this tag
# --------------------------------------
  update-deployment-dev:
    needs: [tag_and_push_image]
    name: Deploy Image (DEV) - Helm Update (app-deployment)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: bfi-finance/bfi-app-deployment
          token: ${{ secrets.GH_PAT }}
          path: app-deployment
          fetch-depth: 1

      - uses: nelonoel/branch-name@v1.0.1
      - name: Binding Environment (Trunk Variables)
        run: |
          echo "TRUNK_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "TRUNK_VERSION=$(echo $BRANCH_NAME | cut -c 9-)" >> $GITHUB_ENV

      - name: Update Image Version in the related HelmChart values.yaml
        uses: fjogeleit/yaml-update-action@v0.7.0
        with:
          valueFile: ${{ env.SERVICE_NAME }}/values-dev.yaml
          propertyPath: "*.image.tag"
          value: ${{ env.IMAGE_PREFIX }}-${{ env.TRUNK_VERSION }}-${{ env.TRUNK_SHA }}
          repository: bfi-finance/bfi-app-deployment
          message: 'chore(deploy): [${{ env.IMAGE_PREFIX }}] Update service (${{ env.SERVICE_NAME }}) image version to (${{ env.IMAGE_PREFIX }}-${{ env.TRUNK_VERSION }}-${{ env.TRUNK_SHA }})'
          # Set this to true to enable PR for version update
          #targetBranch: master
          #branch: chore/deploy-${{ env.IMAGE_PREFIX }}-${{ env.TRUNK_VERSION }}-${{ env.TRUNK_SHA }}
          createPR: false
          branch: master
          targetBranch: master
          token: ${{ secrets.GH_PAT }}
          workDir: app-deployment


